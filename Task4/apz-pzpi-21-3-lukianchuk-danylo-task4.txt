1 Опис прийнятих інженерних рішень

	Клієнтська частина проекту була розроблена на  мові програмування TypeScript за допомогою фреймворку Angular 16. Створення самого проекту відбувалося у редакторі коду Visual Studio Code. Варто також відзначити, що для авторизації та автентифікації користувачів було використано клас «JwtHelperService» із бібліотеки «auth0/angular-jwt».
	Сам проект знаходиться у папці «app», що містить файли налаштування та 3 інші папки: «api», «core» та «features» (рис. 1). Папка «api» містить сервіси, що необхідні для взаємодії із серверною частиною, моделі для відповідних сутностей у системі, а також папку «fn», що містить функції для надсилання запитів на серверну частину. У папці «core» містяться ключові компоненти клієнтського частини програмної системи: домашня сторінка та навігаційна панель. У папці «features» під кожну сутність у базі даних є модулі, що містять відповідні компоненти для їх управління. Також варто відмітити, що налаштування маршрутів клієнтської частини відбувається у файлі «app-routing.module.ts». У файлі «app.module.ts» міститься реєстрація усіх компонентів необхідних для правильного функціонування системи. Крім того, у папці «assets» містяться файли перекладів для локалізації системи у форматі «json».
	Отримані дані представляються у табличному вигляді із можливістю обрати певну дію для взаємодії (рис. 2).
	Для управління даними (редагування та додавання) були створені сторінки із відповідними формами (рис. 3).
	Для створення клієнтської частини було використано архітектуру MVVM. Моделі представлені у вигляді інтерфейсів, що відповідають сутностям наявним у програмній системі. Для подання (View) використано HTML-шаблони. А для моделі подання (ViewModel) використано компоненти, що містять методи та функції для взаємодії із відповідними моделями та відображенням їх результату у поданнях.

2 Пояснення частин програмного коду
	2.1 Авторизація 

	Після того як користувача було ідентифіковано він отримує токен доступу («access token»), який використовується для отримання захищених ресурсів. Цей токен поміщається в локальне сховище («local storage») і при кожному запиті дістається зі сховища та перевіряється (додаток А). Перевірка токену відбувається за допомогою класу «JwtHelperService» із бібліотеки «auth0/angular-jwt».
1  const token = localStorage.getItem("jwt");
2  
3  if (token && !this.jwtHelper.isTokenExpired(token)){
4    return true;
5  }
6  
7  this.router.navigate(["login"]);
8  return false;
	Якщо токен не пройшов перевірку, то користувача перенаправляє на сторінку логіну, де йому треба знову ввести свої дані. У іншому випадку для того, щоб користувача було авторизовано для отримання доступу до захищених ресурсів токен доступу передається у заголовку запиту. Цей процес відбувається автоматично за допомогою «JwtModule» із тієї ж бібліотеки «auth0/angular-jwt» (додаток Б). Для цього використовується функція «tokenGetter».
1  JwtModule.forRoot({
2    config: {
3      tokenGetter: tokenGetter,
4      allowedDomains: ["localhost:5001"],
5      disallowedRoutes: []
6    }
7  })	
	Завдяки цьому механізму відбувається процес авторизації користувачів для отримання доступу до захищених ресурсів.

	2.2 Локалізація

	У навігаційній панелі в правому її краю міститься розділ для вибору локалізації системи: українська або англійська. При виборі того чи іншого варіанту перекладу сайту викликається функція «onClick()», що поміщає у локальне сховище змінну для обраного перекладу і замінює поточну мову на обрану (додаток В).
1 onClick(language: string) {
2    localStorage.setItem('language', language);
3    this.translateService.use(language);
4   }
	Також варто відмітити, що при першому вході на сайт при ініціалізації навігаційної панелі відбувається спроба витягнути переклад із локального сховища і за успішної операції він буде застосований. Але у іншому випадку буде обрано переклад за замовчуванням, яким є англійська мова.
1 ngOnInit(): void {
2     var language = localStorage.getItem('language');
3     if (language == null) {
4        localStorage.setItem('language', 'en');
5        this.translateService.use('en');
6     }
7     else {
8        this.translateService.use(language);
9     }
10 }	
	Крім того, у файлі «app.module.ts» (додаток Б) міститься налаштування, що визначає місце розташування файлів для перекладу.
1 export function HttpLoaderFactory(http: HttpClient) {
2  return new TranslateHttpLoader(http, './assets/i18n/', '.json');
3 }
	Загалом локалізація клієнтської частини не є складною задачею, але водночас вона є дуже важливою, адже надає користувачам кращий досвід використання програмної системи.

3 Діаграми
	
	Для клієнтської частини було створено діаграму прецедентів (рис. 4). Вона надає користувачам доступ до функціоналу серверної частини. Ця діаграма також містить 4 актори: власник ТРЦ, організатор подій, відвідувач подій та адміністратор. Слід відмітити, що власник ТРЦ та організатор подій обидва можуть мати доступ до функціоналу відвідувача подій, але в іншому мають доступ тільки до відповідного їх ролям функціоналу.
	Також було створено діаграму компонентів (рис. 5). Вона надає можливість візуалізувати, як компоненти взаємодіють між собою в межах системи. Крім того, ця діаграма є корисною в управлінні модульністю системи та складністю її структури.
	Діаграма пакетів для клієнтської частини містить 2 головних пакети: «Pages» та «Services» (рис. 6). Всередині цих пакетів знаходяться інші пакети, що взаємодіють одне з одним.
	До того ж, було створено діаграму станів (рис. 7). Ця діаграма показує увесь процес взаємодії користувача із клієнтською частиною. Вона надає можливість зрозуміти які дії необхідно виконати для отримання певного результату.
	Загалом усі наведені діаграми дають краще уявлення про роботу усієї програмної системи для управління подіями в торгово-розважальних центрах «EventSuite».